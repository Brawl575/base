addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

const CORS_HEADERS = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET,POST,OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization"
};

// –ê–∫—Ç–∏–≤–Ω—ã–µ WebSocket-–∫–ª–∏–µ–Ω—Ç—ã
const clients = new Set();
// –ë—É—Ñ–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
const buffer = [];

async function handleRequest(request) {
  const url = new URL(request.url);

  // CORS preflight
  if (request.method === 'OPTIONS') {
    return new Response(null, { status: 204, headers: CORS_HEADERS });
  }

  // WebSocket endpoint
  if (url.pathname === '/ws' && request.headers.get('Upgrade') === 'websocket') {
    return handleWebSocket(request);
  }

  // HTTP ingest endpoint
  if (url.pathname === '/ingest' && request.method === 'POST') {
    return handleIngest(request);
  }

  // –û—à–∏–±–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return new Response(
    JSON.stringify({ error: 'Invalid endpoint. Use /ws or /ingest' }),
    { status: 404, headers: { "Content-Type": "application/json", ...CORS_HEADERS } }
  );
}

// üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
function handleWebSocket(request) {
  const [client, server] = Object.values(new WebSocketPair());
  server.accept();

  clients.add(server);
  console.log("üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ:", clients.size);

  // üîÅ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
  for (const item of buffer) {
    try { server.send(item); } catch { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º */ }
  }

  server.addEventListener('close', () => {
    clients.delete(server);
    console.log("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –û—Å—Ç–∞–ª–æ—Å—å:", clients.size);
  });

  return new Response(null, { status: 101, webSocket: client });
}

// üßæ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö POST-–∑–∞–ø—Ä–æ—Å–æ–≤
async function handleIngest(request) {
  try {
    const bodyText = await request.text();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–±—ã—Ç–∏–π
    buffer.push(bodyText);
    if (buffer.length > 50) buffer.shift();

    // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    for (const socket of clients) {
      try {
        socket.send(bodyText);
      } catch {
        clients.delete(socket);
      }
    }

    console.log("üì® –ò–Ω–≥–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω:", bodyText);

    return new Response(JSON.stringify({ ok: true }), {
      status: 200,
      headers: { "Content-Type": "application/json", ...CORS_HEADERS }
    });

  } catch (err) {
    return new Response(JSON.stringify({ error: err.message }), {
      status: 500,
      headers: { "Content-Type": "application/json", ...CORS_HEADERS }
    });
  }
}
