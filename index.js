export default {
  async fetch(request, env) {
    const url = new URL(request.url);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket
    if (url.pathname === "/ws" && request.headers.get("Upgrade") === "websocket") {
      const id = env.HUB_OBJECT.idFromName("main"); // –û–¥–∏–Ω –æ–±—â–∏–π DO –¥–ª—è –≤—Å–µ—Ö
      const obj = env.HUB_OBJECT.get(id);
      return obj.fetch(request);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ /ingest (POST)
    if (url.pathname === "/ingest" && request.method === "POST") {
      const id = env.HUB_OBJECT.idFromName("main");
      const obj = env.HUB_OBJECT.get(id);
      return obj.fetch(request);
    }

    // CORS preflight
    if (request.method === "OPTIONS") {
      return new Response(null, {
        status: 204,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET,POST,OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, Authorization",
        },
      });
    }

    // –û—à–∏–±–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return new Response(JSON.stringify({ error: "Use /ws or /ingest" }), {
      status: 404,
      headers: {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
      },
    });
  },
};

// === Durable Object ===
export class HUB_OBJECT {
  constructor() {
    this.clients = new Set();
    this.buffer = [];
  }

  async fetch(request) {
    const url = new URL(request.url);

    // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (url.pathname === "/ws" && request.headers.get("Upgrade") === "websocket") {
      const [client, server] = Object.values(new WebSocketPair());
      server.accept();

      this.clients.add(server);
      console.log("üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç. –í—Å–µ–≥–æ:", this.clients.size);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      for (const msg of this.buffer) {
        try { server.send(msg); } catch {}
      }

      server.addEventListener("close", () => {
        this.clients.delete(server);
        console.log("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –û—Å—Ç–∞–ª–æ—Å—å:", this.clients.size);
      });

      return new Response(null, { status: 101, webSocket: client });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ POST /ingest
    if (url.pathname === "/ingest" && request.method === "POST") {
      const body = await request.text();

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä (–¥–æ 50 —Å–æ–±—ã—Ç–∏–π)
      this.buffer.push(body);
      if (this.buffer.length > 50) this.buffer.shift();

      console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:", body);
      console.log("üì° –ö–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", this.clients.size);

      // –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
      for (const ws of this.clients) {
        try {
          ws.send(body);
        } catch {
          this.clients.delete(ws);
        }
      }

      return new Response(JSON.stringify({ ok: true }), {
        headers: {
          "Content-Type": "application/json",
          "Access-Control-Allow-Origin": "*",
        },
      });
    }

    return new Response("Invalid", { status: 404 });
  }
}
